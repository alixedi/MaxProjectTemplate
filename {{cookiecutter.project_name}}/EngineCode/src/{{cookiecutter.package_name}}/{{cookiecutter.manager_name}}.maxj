{% if cookiecutter.manager_class|lower == "custom" %}
package {{ cookiecutter.package_name }};

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class {{ cookiecutter.manager_name }} extends CustomManager {

	private static final String s_kernelName = "{{ cookiecutter.kernel_name }}";
	
	public {{ cookiecutter.manager_name }}({{ cookiecutter.parameters_name }} engineParameters) {
		super(engineParameters);

		KernelBlock block = addKernel(new {{ cookiecutter.kernel_name }}(makeKernelParameters(s_kernelName)));

		for (String inputName: block.getAllInputs())
			block.getInput(inputName).connect(addStreamFromCPU(inputName));
		for (String outputName: block.getAllOutputs())
			addStreamToCPU(outputName).connect(block.getOutput(outputName));

		createSLiCinterface(modeDefault());

		configBuild(engineParameters);
	}

	private static EngineInterface modeDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.INT32;
		int        size = type.sizeInBytes();

		InterfaceParam  a    = engine_interface.addParam("A", CPUTypes.INT);
		InterfaceParam  N    = engine_interface.addParam("N", CPUTypes.INT);

		engine_interface.setScalar(s_kernelName, "a", a);

		engine_interface.setTicks(s_kernelName, N);
		engine_interface.setStream("x",   type, N * size);
		engine_interface.setStream("y",   type, N * size);
		engine_interface.setStream("s", type, N * size);
		return engine_interface;
	}
	
	private void configBuild({{ cookiecutter.parameters_name }} params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}
	
	public static void main(String[] args) {
		{{ cookiecutter.manager_name }} manager = new {{ cookiecutter.manager_name }}(new {{ cookiecutter.parameters_name }}(args));
		manager.build();
	}
}
{% else %}
package {{ cookiecutter.package_name }};

import static com.maxeler.maxcompiler.v2.managers.standard.Manager.link;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.IOLink.IODestination;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;

public class {{ cookiecutter.manager_name }} {

	private static final String s_kernelName = "{{ cookiecutter.kernel_name }}";

	public static void main(String[] args) {
		{{ cookiecutter.parameters_name }} params = new {{ cookiecutter.parameters_name }}(args);
		Manager manager = new Manager(params);
		Kernel kernel   = new {{ cookiecutter.kernel_name }}(manager.makeKernelParameters(s_kernelName));
		manager.setKernel(kernel);
		manager.setIO(
			link("x",   IODestination.CPU),
			link("y",   IODestination.CPU),
			link("s", IODestination.CPU));

		manager.createSLiCinterface(interfaceDefault());
		
		configBuild(manager, params);
		
		manager.build();
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.INT32;
		int        size = type.sizeInBytes();

		InterfaceParam  a    = engine_interface.addParam("A", CPUTypes.INT);
		InterfaceParam  N    = engine_interface.addParam("N", CPUTypes.INT);

		engine_interface.setScalar(s_kernelName, "a", a);

		engine_interface.setTicks(s_kernelName, N);
		engine_interface.setStream("x",   type, N * size);
		engine_interface.setStream("y",   type, N * size);
		engine_interface.setStream("s", type, N * size);
		return engine_interface;
	}
	
	private static void configBuild(Manager manager, {{ cookiecutter.parameters_name }} params) {
		manager.setEnableStreamStatusBlocks(false);
		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}
}
{% endif %}
